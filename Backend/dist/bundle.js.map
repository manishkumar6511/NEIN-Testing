{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://npm-or-api/./configuration/db.js","webpack://npm-or-api/./src/Listners/FinaceDataToDb.js","webpack://npm-or-api/./src/Listners/sendmail.js","webpack://npm-or-api/./src/Routes/Dashboard/Dashboard.js","webpack://npm-or-api/./src/Routes/Login/Login.js","webpack://npm-or-api/./src/Routes/Removals/Air_Export_Removals.js","webpack://npm-or-api/./src/Routes/Removals/Air_Import_Removals.js","webpack://npm-or-api/./src/Routes/Removals/Domastic.js","webpack://npm-or-api/./src/Routes/Removals/Ocean_Export_Removals.js","webpack://npm-or-api/./src/Routes/Removals/Ocean_Import_Removals.js","webpack://npm-or-api/./src/Routes/Reports/reports.js","webpack://npm-or-api/./src/Routes/customBrokerage/CHA_AirImport.js","webpack://npm-or-api/./src/Routes/customBrokerage/Cha_AirExport.js","webpack://npm-or-api/./src/Routes/customBrokerage/Cha_OceanExport.js","webpack://npm-or-api/./src/Routes/customBrokerage/Cha_OceanImport.js","webpack://npm-or-api/./src/Routes/freightForwarding/AirExport.js","webpack://npm-or-api/./src/Routes/freightForwarding/AirImport.js","webpack://npm-or-api/./src/Routes/freightForwarding/OceanExport.js","webpack://npm-or-api/./src/Routes/freightForwarding/OceanImport.js","webpack://npm-or-api/./src/controllers/DashboardController.js","webpack://npm-or-api/./src/controllers/Login.js","webpack://npm-or-api/./src/controllers/Reports.js","webpack://npm-or-api/./src/controllers/customBrokerageController.js","webpack://npm-or-api/./src/controllers/freightForwardController.js","webpack://npm-or-api/./src/controllers/removalsController.js","webpack://npm-or-api/external commonjs \"cors\"","webpack://npm-or-api/external commonjs \"csv-parser\"","webpack://npm-or-api/external commonjs \"express\"","webpack://npm-or-api/external commonjs \"moment\"","webpack://npm-or-api/external commonjs \"mssql\"","webpack://npm-or-api/external commonjs \"multer\"","webpack://npm-or-api/external commonjs \"mysql\"","webpack://npm-or-api/external commonjs \"node-cron\"","webpack://npm-or-api/external commonjs \"nodemailer\"","webpack://npm-or-api/external node-commonjs \"fs\"","webpack://npm-or-api/external node-commonjs \"https\"","webpack://npm-or-api/external node-commonjs \"path\"","webpack://npm-or-api/external node-commonjs \"util\"","webpack://npm-or-api/webpack/bootstrap","webpack://npm-or-api/./src/index.js"],"sourcesContent":["// For MySQL\r\nconst mysql = require(\"mysql\");\r\nconst sql = require(\"mssql\");\r\n\r\nconst ormdb = mysql.createConnection({\r\n    host: \"localhost\",\r\n    user: \"root\",\r\n    password: \"\",\r\n    database: \"ormdb\"\r\n});\r\n\r\nconst leavemanagement = mysql.createConnection({\r\n    host: \"localhost\",\r\n    user: \"root\",\r\n    password: \"\",\r\n    database: \"leavemanagement\"\r\n});\r\n\r\nconst test = mysql.createConnection({\r\n    host: \"localhost\",\r\n    user: \"root\",\r\n    password: \"\",\r\n    database: \"test\"\r\n});\r\n\r\n// SQL Server connection configuration\r\nconst sqlConfig = {\r\n    user: 'sa',\r\n    password: 'Ne!Nlog!DB',\r\n    server: '10.206.10.10',\r\n    database: 'Logisys',\r\n    options: {\r\n        encrypt: false,\r\n        enableArithAbort: true,\r\n        connectTimeout: 30000, // 30 seconds\r\n        requestTimeout: 60000  // 60 seconds\r\n    },\r\n    pool: {\r\n        max: 10,\r\n        min: 0,\r\n        idleTimeoutMillis: 30000\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n// Create SQL Server connection pool\r\n// const sqlServerConnectionPool = new sql.ConnectionPool(sqlConfig)\r\n//     .connect()\r\n//     .then(pool => {\r\n//         console.log(\"Connected to SQL Server\");\r\n//         return pool;\r\n//     })\r\n//     .catch(err => {\r\n//         console.log(\"Failed to connect to SQL Server:\", err);\r\n//     });\r\n\r\n// module.exports = {\r\n//     ormdb,\r\n//     leavemanagement,\r\n//     test,\r\n//     sqlServerConnectionPool // export the promise\r\n// };\r\n\r\nmodule.exports = {\r\n    ormdb,\r\n    leavemanagement,\r\n    test // export the promise\r\n};\r\n","const express = require('express');\r\nconst app = express();\r\nconst fs = require('fs');\r\nconst csv = require('csv-parser');\r\nconst moment = require('moment');\r\nconst { ormdb } = require('../../configuration/db');\r\nconst multer = require('multer');\r\nconst path = require('path');\r\n\r\n// Function to generate the dynamic file path based on current date and time\r\nconst generateFilePath = (originalName) => {\r\n    const now = moment();\r\n    const year = now.year();\r\n    const month = now.format('MM');\r\n    const day = now.format('DD');\r\n    const hour = now.format('HH');\r\n    const uploadDir = path.join('E:/neinSoft/files/Nippon-OR/Upload', `${year}/${month}/${day}/${hour}`);\r\n\r\n    // Ensure the directory exists\r\n    if (!fs.existsSync(uploadDir)) {\r\n        fs.mkdirSync(uploadDir, { recursive: true });\r\n    }\r\n\r\n    return path.join(uploadDir, originalName);\r\n};\r\n\r\nconst storage = multer.diskStorage({\r\n    destination: (req, file, cb) => {\r\n        cb(null, path.dirname(generateFilePath(file.originalname)));\r\n    },\r\n    filename: (req, file, cb) => {\r\n        cb(null, file.originalname);\r\n    }\r\n});\r\nconst upload = multer({ storage: storage });\r\n\r\nconst processInvoiceData = (data) => {\r\n    // console.log(\"this is procces data \" +data);\r\n    const invoices = {};\r\n\r\n    data.forEach(row => {\r\n      \r\n        const Branch = row['Branch'];\r\n     \r\n        const Division = row['Division'];\r\n     \r\n        const invoiceNo = row['Invoice No.'];\r\n     \r\n        const airwayBillNo = row['Airway Bill No.'];\r\n   \r\n        const issueDate = row['Issue Date'];\r\n      \r\n        const amount = parseFloat(row['Amount (LCR)'] || 0);\r\n\r\n        const accountCode = row['Account Code'];\r\n\r\n        const lineAmount = parseFloat(row['Amount (LCR)']|| 0);\r\n\r\n\r\n        if (!invoices[invoiceNo]) {\r\n            invoices[invoiceNo] = {\r\n                Branch: Branch,\r\n                Division: Division,\r\n                AirwayBillNo: airwayBillNo,\r\n                IssueDate: issueDate,\r\n                Amount: amount,\r\n                Revenue: 0,\r\n                Reimbursement: 0,\r\n                GST: 0\r\n            };\r\n        }\r\n\r\n        const accountNumber = parseInt(accountCode.slice(0, 3), 10); // Get the first three digits\r\n\r\n        if (accountCode.startsWith('3') || accountCode.startsWith('218')) {\r\n            invoices[invoiceNo].Revenue += lineAmount;\r\n        } else if (accountNumber >= 261 && accountNumber <= 278) {\r\n            invoices[invoiceNo].GST += lineAmount;\r\n        } else if (accountCode.startsWith('2') && !accountCode.startsWith('218')) {\r\n            invoices[invoiceNo].Reimbursement += lineAmount;\r\n        }\r\n        \r\n    });\r\n\r\n\r\n    Object.keys(invoices).forEach(invoiceNo => {\r\n        const invoice = invoices[invoiceNo];\r\n        const totalCalculated = invoice.Revenue + invoice.Reimbursement + invoice.GST;\r\n            // console.log(\"totalCalculated \"+totalCalculated);\r\n            // console.log(\"nvoice.Amount \"+invoice.Amount);\r\n          // Define a small epsilon value to account for floating-point precision issues\r\n    const epsilon = 0.0001;\r\n    invoice.Status = Math.abs(totalCalculated - invoice.Amount) < epsilon;\r\n\r\n    if(!invoice.Status){\r\n\r\n        console.log(\"Error in Invoice send mail \");\r\n        console.log(\"sending mail....\");\r\n    }\r\n\r\n    });\r\n\r\n    return invoices;\r\n};\r\n\r\n// Function to insert the processed data into the master table\r\nconst insertIntoMasterTable = (invoices) => {\r\n    Object.keys(invoices).forEach(invoiceNo => {\r\n        const invoice = invoices[invoiceNo];\r\n\r\n        // console.log(\"invoice \");\r\n        // console.log(invoice);\r\n\r\n        const insertQuery = `\r\n            INSERT INTO finance_master_data (Branch,Division,\r\n                InvoiceNo, AirwayBillNo, IssueDate, Amount, Revenue, Reimbursement, GST, Status\r\n            ) VALUES (?,?,?, ?, ?, ?, ?, ?, ?, ?)\r\n        `;\r\n\r\n        ormdb.query(insertQuery, [invoice.Branch,invoice.Division,\r\n            invoiceNo, invoice.AirwayBillNo, invoice.IssueDate, invoice.Amount, \r\n            invoice.Revenue, invoice.Reimbursement, invoice.GST, invoice.Status\r\n        ], (err, results) => {\r\n            if (err) {\r\n                console.error('Database error:', err);\r\n            } else {\r\n                console.log('Master row inserted:', results.insertId);\r\n            }\r\n        });\r\n    });\r\n};\r\n\r\n\r\nconst util = require('util');\r\n\r\napp.post('/upload', upload.single('file'), async (req, res) => {\r\n    const dataRows = [];\r\n    console.log(\"this is the upload \");\r\n  \r\n    if (!req.file) {\r\n        return res.status(400).send('No file uploaded.');\r\n    }\r\n\r\n    const filePath = req.file.path;\r\n\r\n    try {\r\n        const rows = await new Promise((resolve, reject) => {\r\n            const resultRows = [];\r\n            fs.createReadStream(filePath)\r\n                .pipe(csv())\r\n                .on('headers', (headers) => {\r\n                    headers = headers.map(header => header.trim());\r\n                })\r\n                .on('data', (row) => {\r\n                    const trimmedRow = {};\r\n                    Object.keys(row).forEach(key => {\r\n                        trimmedRow[key.trim()] = row[key] ? row[key].trim() : '';\r\n                    });\r\n                    resultRows.push(trimmedRow);\r\n                })\r\n                .on('end', () => {\r\n                    resolve(resultRows);\r\n                })\r\n                .on('error', (error) => {\r\n                    reject(error);\r\n                });\r\n        });\r\n\r\n        // Promisify the ormdb.query function\r\n        const query = util.promisify(ormdb.query).bind(ormdb);\r\n\r\n        for (const row of rows) {\r\n            const Branch = row['Branch'] || '';\r\n            const Division = row['Division'] || '';\r\n            const Invoice_No = row['Invoice No.'] || ''; \r\n            const Issue_Date  = row['Issue Date'];\r\n            const Sales_group = row['Sales group'] || '';\r\n            const Airway_Bill_No = row['Airway Bill No.'] || '';\r\n            const Master_Airway_Bill_No = row['Master Airway Bill No.'] || '';\r\n            const Reference_No = row['Reference No.'] || '';\r\n            const Bill_To_Name = row['Bill To Name'] || '';\r\n            const Shipper_Name = row['Shipper Name'] || '';\r\n            const Consignee_Name = row['Consignee Name'] || '';\r\n            const SR_Date = row['S/R Date'];\r\n            const SR_No = row['S/R No.'] || '';\r\n            const Amount = row['Amount (LCR)'] || '';\r\n            const Account_Code = row['Account Code'] || '';\r\n            const Invoice_Create_Date = row['Invoice Create Date'];\r\n\r\n            const checkQuery = `SELECT count(InvoiceNo) AS count FROM finance_master_data WHERE InvoiceNo = ?`;\r\n\r\n            const result = await query(checkQuery, [Invoice_No]);\r\n\r\n            const isDuplicate = result[0].count > 0;\r\n            if (!isDuplicate) {\r\n                const insertQuery = `\r\n                    INSERT INTO financedata (\r\n                        Branch, Division, InvoiceNo, IssueDate, Salesgroup, \r\n                        AirwayBillNo, MasterAirwayBillNo, ReferenceNo, BillToName, \r\n                        ShipperName, ConsigneeName, S_R_Date, S_R_No,\r\n                        Amount, Account_Code, Invoice_Create_Date\r\n                    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`;\r\n\r\n                const insertResults = await query(insertQuery, [\r\n                    Branch, Division, Invoice_No, Issue_Date, Sales_group, \r\n                    Airway_Bill_No, Master_Airway_Bill_No, Reference_No, Bill_To_Name, \r\n                    Shipper_Name, Consignee_Name, SR_Date, SR_No, \r\n                    Amount, Account_Code, Invoice_Create_Date\r\n                ]);\r\n\r\n                console.log('Row inserted:', insertResults.insertId);\r\n                dataRows.push(row);\r\n            } else {\r\n                console.log('Duplicate entry found. Skipping insert.');\r\n            }\r\n        }\r\n\r\n        if (dataRows.length > 0) {\r\n            const processedInvoices = processInvoiceData(dataRows);\r\n            insertIntoMasterTable(processedInvoices);\r\n        }\r\n\r\n        console.log('CSV file successfully processed');\r\n        res.status(200).send('File processed and data inserted successfully.');\r\n    } catch (error) {\r\n        console.error('Error processing file:', error);\r\n        res.status(500).send('An error occurred while processing the file.');\r\n    }\r\n});\r\n\r\n\r\n\r\napp.post('/getHAWB_NO',  (req, res) => {\r\n    const mawbNumber = req.body.HAWB_NO;\r\n    let query;\r\n    let queryParams = [];\r\n    console.log(mawbNumber);\r\n\r\n    if (mawbNumber) {\r\n        query = \"SELECT ae.HAWB_NO FROM air_export_ff ae WHERE ae.MAWB_NO LIKE ? UNION SELECT ae.HAWB_NO FROM air_export_ff ae WHERE ae.HAWB_NO LIKE ? \";\r\n\r\n        queryParams = [`%${mawbNumber}%`,`%${mawbNumber}%`];\r\n    } else {\r\n        query = \"SELECT ae.HAWB_NO FROM air_export_ff ae UNION SELECT ae.MAWB_NO FROM air_export_ff ae ;\";\r\n    }\r\n ormdb.query(query, queryParams, (err, result) => {\r\n        if (err) {\r\n            console.error(err);\r\n            res.status(500).send(\"An error occurred while fetching data\");\r\n        } else {\r\n            res.json(result);\r\n        }\r\n    });\r\n\r\n\r\n});\r\n\r\napp.post('/getInvoice',  (req, res) => {\r\n    const mawbNumber = req.body.Invoice_No;\r\n    const Division = req.body.Division;\r\n    let query;\r\n    let queryParams = [];\r\n    console.log(mawbNumber);\r\n\r\n    if (mawbNumber) {\r\n        query = \"SELECT ae.InvoiceNo FROM finance_master_data ae WHERE ae.InvoiceNo LIKE ? AND Division=? \";\r\n\r\n        queryParams = [`%${mawbNumber}%`,Division];\r\n    } else {\r\n        query = \"SELECT ae.InvoiceNo FROM finance_master_data ae ;\";\r\n    }\r\n ormdb.query(query, queryParams, (err, result) => {\r\n        if (err) {\r\n            console.error(err);\r\n            res.status(500).send(\"An error occurred while fetching data\");\r\n        } else {\r\n            res.json(result);\r\n        }\r\n    });\r\n\r\n\r\n});\r\n\r\n\r\napp.post('/getHAWB_NOData',  (req, res) => {\r\n    const mawbNumber = req.body.HAWB_NO;\r\n    let query;\r\n    let queryParams = [];\r\n    console.log(mawbNumber);\r\n    if (!mawbNumber) {\r\n        return res.status(400).send(\"MAWB_NO  required\");\r\n    }\r\n   \r\n        query = \" SELECT ae.*, fm.* FROM air_export_ff ae LEFT JOIN finance_master_data fm ON ae.MAWB_NO = fm.AirwayBillNo WHERE ae.MAWB_NO = ? \" +\r\n      \"  UNION \"+\r\n\"  SELECT ae.*, fm.* FROM air_export_ff ae LEFT JOIN finance_master_data fm ON ae.HAWB_NO = fm.AirwayBillNo WHERE ae.HAWB_NO = ? \";\r\n    \r\n        queryParams = [mawbNumber,mawbNumber];\r\n\r\n ormdb.query(query, queryParams, (err, result) => {\r\n        if (err) {\r\n            console.error(err);\r\n            res.status(500).send(\"An error occurred while fetching data\");\r\n        } else {\r\n            res.json(result);\r\n        }\r\n    });\r\n});\r\n\r\napp.post('/getHAWB_NODataFromInvoice',  (req, res) => {\r\n    const mawbNumber = req.body.Invoice_No;\r\n    let query;\r\n    let queryParams = [];\r\n    console.log(mawbNumber);\r\n    if (!mawbNumber) {\r\n        return res.status(400).send(\"MAWB_NO  required\");\r\n    }\r\n   \r\n\r\n\r\n        query = \" SELECT ae.*, fm.* FROM air_export_ff ae LEFT JOIN finance_master_data fm ON ae.MAWB_NO = fm.AirwayBillNo WHERE ae.MAWB_NO = ( SELECT AirwayBillNo  FROM finance_master_data  WHERE InvoiceNo = ? ) \" +\r\n      \"  UNION \"+\r\n\"  SELECT ae.*, fm.* FROM air_export_ff ae LEFT JOIN finance_master_data fm ON ae.HAWB_NO = fm.AirwayBillNo WHERE ae.HAWB_NO = ( SELECT AirwayBillNo  FROM finance_master_data  WHERE InvoiceNo =  ? ) \";\r\n    \r\n        queryParams = [mawbNumber,mawbNumber];\r\n\r\n ormdb.query(query, queryParams, (err, result) => {\r\n        if (err) {\r\n            console.error(err);\r\n            res.status(500).send(\"An error occurred while fetching data\");\r\n        } else {\r\n            res.json(result);\r\n        }\r\n    });\r\n});\r\n\r\n\r\n\r\nmodule.exports = app;\r\n","const nodemailer = require('nodemailer');\r\n\r\nasync function sendEmail(from, to, cc, body, subject) {\r\n    console.log(\"Sending Email...\");\r\n\r\n    // Create a transporter object using the default SMTP transport\r\n    let transporter = nodemailer.createTransport({\r\n        host: '95.217.110.90',\r\n        port: 25,\r\n        secure: false, \r\n        auth: {\r\n            user: 'test',\r\n            pass: 'Mypassword1234'\r\n        },\r\n        connectionTimeout: 10000, // 10 seconds\r\n        greetingTimeout: 5000, // 5 seconds\r\n        debug: true\r\n    });\r\n    \r\n\r\n\r\n\r\n\r\n    // Set up email data with unicode symbols\r\n    let mailOptions = {\r\n        from: `\"${from}\" <or.neinsoft@nipponexpress.com>`, // sender address\r\n        to: to,\r\n        cc: cc, \r\n        subject: subject,\r\n        html: body\r\n    };\r\n\r\n    // Send mail with defined transport object\r\n    transporter.sendMail(mailOptions, (error, info) => {\r\n        if (error) {\r\n            return console.log(error);\r\n        }\r\n        console.log('Message sent: %s', info.messageId);\r\n    });\r\n}\r\n\r\n\r\n///sendEmail('Your Name', 'recipient@example.com', 'cc@example.com', '<h1>Hello World</h1>', 'Test Subject');\r\nmodule.exports = sendEmail;","const {ormdb,leavemanagement,test}=require('../../../configuration/db');\r\n\r\n\r\nexports.AirImportDahboard= (req, res) => {\r\n\r\n    const FromDate = req.body.FromDate;\r\n    const Todate = req.body.Todate;\r\n    const DESTINATION_AIRPROT_CODE = req.body.BranchCode;\r\n   // const BranchId = req.body.BranchId;\r\n    let query;\r\n    let queryParams = [];\r\n    // console.log(FromDate);\r\n    // console.log(Todate);\r\n    // console.log(BranchId);\r\n\r\n\r\n        query = \"  SELECT  * FROM airimport_ff_ftp AS f  WHERE  date(f.createdDate) BETWEEN ? AND ?  AND f.DESTINATION_AIRPROT_CODE=?  AND flag =0 \";\r\n       queryParams = [FromDate,Todate,DESTINATION_AIRPROT_CODE];\r\n\r\n ormdb.query(query, queryParams, (err, result) => {\r\n        if (err) {\r\n            console.error(err);\r\n            res.status(500).send(\"An error occurred while fetching data\");\r\n        } else {\r\n            //console.log(result.length);\r\n            res.json(result);\r\n        }\r\n    });\r\n\r\n}\r\nexports.AirExportDahboard= (req, res) => {\r\n\r\n    const FromDate = req.body.FromDate;\r\n    const Todate = req.body.Todate;\r\n    const BranchId = req.body.BranchId;\r\n    let query;\r\n    let queryParams = [];\r\n    // console.log(FromDate);\r\n    // console.log(Todate);\r\n    // console.log(BranchId);\r\n\r\n\r\n        query = \"  SELECT  * FROM airexport_ff_ftp AS f  WHERE  date(f.createdDate) BETWEEN ? AND ?  AND f.BRANCH=?  AND flag =0 \";\r\n       queryParams = [FromDate,Todate,BranchId];\r\n\r\n ormdb.query(query, queryParams, (err, result) => {\r\n        if (err) {\r\n            console.error(err);\r\n            res.status(500).send(\"An error occurred while fetching data\");\r\n        } else {\r\n            //console.log(result.length);\r\n            res.json(result);\r\n        }\r\n    });\r\n\r\n}\r\nexports.OceanImportDahboard= (req, res) => {\r\n\r\n    const FromDate = req.body.FromDate;\r\n    const Todate = req.body.Todate;\r\n    const BranchId = req.body.BranchId;\r\n    let query;\r\n    let queryParams = [];\r\n    // console.log(FromDate);\r\n    // console.log(Todate);\r\n    // console.log(BranchId);\r\n\r\n\r\n        query = \" SELECT  * FROM ocean_import_ff_ftp AS f  WHERE  date(f.Created_date) BETWEEN  ? AND ?  AND f.Branch_Code=?  AND flag =0 \";\r\n       queryParams = [FromDate,Todate,BranchId];\r\n\r\n ormdb.query(query, queryParams, (err, result) => {\r\n        if (err) {\r\n            console.error(err);\r\n            res.status(500).send(\"An error occurred while fetching data\");\r\n        } else {\r\n            //console.log(result.length);\r\n            res.json(result);\r\n        }\r\n    });\r\n\r\n}\r\nexports.OceanExportDahboard= (req, res) => {\r\n\r\n    const FromDate = req.body.FromDate;\r\n    const Todate = req.body.Todate;\r\n    const BranchId = req.body.BranchId;\r\n    let query;\r\n    let queryParams = [];\r\n    // console.log(FromDate);\r\n    // console.log(Todate);\r\n    // console.log(BranchId);\r\n\r\n\r\n        query = \" SELECT  * FROM ocean_export_ff_ftp AS f  WHERE  date(f.created_date) BETWEEN  ? AND ?  AND f.Branch_Code= ?  AND flag =0  \";\r\n       queryParams = [FromDate,Todate,BranchId];\r\n\r\n ormdb.query(query, queryParams, (err, result) => {\r\n        if (err) {\r\n            console.error(err);\r\n            res.status(500).send(\"An error occurred while fetching data\");\r\n        } else {\r\n            //console.log(result.length);\r\n            res.json(result);\r\n        }\r\n    });\r\n\r\n}\r\n\r\n","\r\nconst {ormdb,leavemanagement,test,sqlServerConnection}=require('../../../configuration/db');\r\n\r\n\r\n\r\nexports.getAllData= (req, res) => {\r\n  console.log(\"this is iuse login \");\r\n            // const userid:\r\n            // const password:\r\n           console.log(req.body);\r\n\r\n  \r\n        query = \"SELECT * FROM `user` WHERE `emp_id` = ? AND  password = ? \";\r\n   \r\n leavemanagement.query(query,[req.body.userid,req.body.password]  ,(err, result) => {\r\n        if (err) {\r\n            console.error(err);\r\n            res.status(500).send(\"An error occurred while fetching data\");\r\n        } else {\r\n\r\n            if(result==0){\r\n                res.json(\"no data found \");\r\n            }\r\n            \r\n            \r\n            res.json(result);\r\n        }\r\n    });\r\n};\r\n\r\nexports.getAccess= (req, res) => {\r\n  console.log(\"this is getAccess \");\r\n            // const userid:\r\n            // const password:\r\n           console.log(req.body);\r\n\r\n  \r\n        query = \"SELECT access_config FROM `user_access` WHERE `user_id` = ? \";\r\n   \r\n        ormdb.query(query,[req.body.userid]  ,(err, result) => {\r\n        if (err) {\r\n            console.error(err);\r\n            res.status(500).send(\"An error occurred while fetching data\");\r\n        } else {\r\n\r\n            if(result==0){\r\n                res.json(\"no data found \");\r\n            }\r\n            \r\n            \r\n            res.json(result);\r\n        }\r\n    });\r\n};\r\n\r\n","const { ormdb, sqlServerConnectionPool } = require('../../../configuration/db');\r\n\r\nexports.InsertAirExportRemovals= (req, res) => {\r\n\r\n\r\n    console.log(\"this is Removals Air Export   insert \"); \r\n          const data =     req.body;\r\n          console.log(\"data \"+data);\r\n    \r\n    const currentDate = new Date();\r\n    const currentYear = currentDate.getFullYear();\r\n    console.log(\"Current Year: \" + currentYear);\r\n    const registerBranchId = data.Register_Branch_Id;\r\n    const mawbNumber = data.MAWB_NO;\r\n    const HAWB_NO = data.HAWB_NO;\r\n    \r\n    const maxJobCountQuery = \" select MAX(sequenceId) as  id from  air_export_removals \";\r\n                               \r\n    ormdb.query(maxJobCountQuery, [registerBranchId, currentYear], (err, maxCountResult) => {\r\n        if (err) {\r\n            console.error(err);\r\n            res.status(500).send(\"An error occurred while fetching max JobCount\");\r\n            return;\r\n        }\r\n    \r\n        const maxCount = maxCountResult[0].count || 0; // Handle case where no rows found\r\n        const newJobCount = maxCount + 1;\r\n        \r\n        // Update data object with calculated values\r\n       data.OR_JOB_NO = registerBranchId+\"/AER\"+currentYear+\"/\"+newJobCount ;\r\n        data.sequenceId = newJobCount;\r\n    \r\n    query = \"INSERT INTO `air_export_removals` SET  ? \";\r\n    \r\n    \r\n    ormdb.query(query, data ,(err, result,feilds) => {\r\n           if (err) {\r\n               console.error(err);\r\n               res.status(500).send(\"An error occurred while Inserting  data\");\r\n           } else {\r\n          //  updateMasterStatus(mawbNumber,HAWB_NO);\r\n               res.json(result);\r\n           }\r\n       });\r\n    \r\n    });\r\n    };\r\n    \r\n    ","const { ormdb, sqlServerConnectionPool } = require('../../../configuration/db');\r\n\r\nexports.InsertAimportRemovals= (req, res) => {\r\n\r\n\r\n    console.log(\"this is Removals Air Import   insert \"); \r\n          const data =     req.body;\r\n          console.log(\"data \"+data);\r\n    \r\n    const currentDate = new Date();\r\n    const currentYear = currentDate.getFullYear();\r\n    console.log(\"Current Year: \" + currentYear);\r\n    const registerBranchId = data.Register_Branch_Id;\r\n    const mawbNumber = data.MAWB_NO;\r\n    const HAWB_NO = data.HAWB_NO;\r\n    \r\n    const maxJobCountQuery = \" select MAX(sequenceId) as  id from  air_import_removals \";\r\n                               \r\n    ormdb.query(maxJobCountQuery, [registerBranchId, currentYear], (err, maxCountResult) => {\r\n        if (err) {\r\n            console.error(err);\r\n            res.status(500).send(\"An error occurred while fetching max JobCount\");\r\n            return;\r\n        }\r\n    \r\n        const maxCount = maxCountResult[0].count || 0; // Handle case where no rows found\r\n        const newJobCount = maxCount + 1;\r\n        \r\n        // Update data object with calculated values\r\n       data.OR_JOB_NO = registerBranchId+\"/AIR\"+currentYear+\"/\"+newJobCount ;\r\n        data.sequenceId = newJobCount;\r\n    \r\n    query = \"INSERT INTO `air_import_removals` SET  ? \";\r\n    \r\n    \r\n    ormdb.query(query, data ,(err, result,feilds) => {\r\n           if (err) {\r\n               console.error(err);\r\n               res.status(500).send(\"An error occurred while Inserting  data\");\r\n           } else {\r\n         //   updateMasterStatus(mawbNumber,HAWB_NO);\r\n               res.json(result);\r\n           }\r\n       });\r\n    \r\n    });\r\n    };\r\n    \r\n    ","const { ormdb, sqlServerConnectionPool } = require('../../../configuration/db');\r\n\r\nexports.InsertDomasticRemovals= (req, res) => {\r\n\r\n\r\n    console.log(\"this is Removals  domestic_removals   insert \"); \r\n          const data =     req.body;\r\n          console.log(\"data \"+data);\r\n    \r\n    const currentDate = new Date();\r\n    const currentYear = currentDate.getFullYear();\r\n    console.log(\"Current Year: \" + currentYear);\r\n    const registerBranchId = data.Register_Branch_Id;\r\n    const mawbNumber = data.MAWB_NO;\r\n    const HAWB_NO = data.HAWB_NO;\r\n    \r\n    const maxJobCountQuery = \" select MAX(sequenceId) as  id from  domestic_removals \";\r\n                               \r\n    ormdb.query(maxJobCountQuery, [registerBranchId, currentYear], (err, maxCountResult) => {\r\n        if (err) {\r\n            console.error(err);\r\n            res.status(500).send(\"An error occurred while fetching max JobCount\");\r\n            return;\r\n        }\r\n    \r\n        const maxCount = maxCountResult[0].count || 0; // Handle case where no rows found\r\n        const newJobCount = maxCount + 1;\r\n        \r\n        // Update data object with calculated values\r\n       data.OR_JOB_NO = registerBranchId+\"/DMR\"+currentYear+\"/\"+newJobCount ;\r\n        data.sequenceId = newJobCount;\r\n    \r\n    query = \"INSERT INTO `domestic_removals` SET  ? \";\r\n    \r\n    \r\n    ormdb.query(query, data ,(err, result,feilds) => {\r\n           if (err) {\r\n               console.error(err);\r\n               res.status(500).send(\"An error occurred while Inserting  data\");\r\n           } else {\r\n         //   updateMasterStatus(mawbNumber,HAWB_NO);\r\n               res.json(result);\r\n           }\r\n       });\r\n    \r\n    });\r\n    };\r\n    \r\n    ","const { ormdb, sqlServerConnectionPool } = require('../../../configuration/db');\r\n\r\nexports.InsertOceanExportRemovals= (req, res) => {\r\n\r\n\r\n    console.log(\"this is Removals Ocean Export insert \"); \r\n          const data =     req.body;\r\n          console.log(\"data \"+data);\r\n    \r\n    const currentDate = new Date();\r\n    const currentYear = currentDate.getFullYear();\r\n    console.log(\"Current Year: \" + currentYear);\r\n    const registerBranchId = data.Register_Branch_Id;\r\n    const mawbNumber = data.MAWB_NO;\r\n    const HAWB_NO = data.HAWB_NO;\r\n    \r\n    const maxJobCountQuery = \" select MAX(sequenceId) as  id from  ocean_export_removals \";\r\n                               \r\n    ormdb.query(maxJobCountQuery, [registerBranchId, currentYear], (err, maxCountResult) => {\r\n        if (err) {\r\n            console.error(err);\r\n            res.status(500).send(\"An error occurred while fetching max JobCount\");\r\n            return;\r\n        }\r\n    \r\n        const maxCount = maxCountResult[0].count || 0; // Handle case where no rows found\r\n        const newJobCount = maxCount + 1;\r\n        \r\n        // Update data object with calculated values\r\n       data.OR_JOB_NO = registerBranchId+\"/OER\"+currentYear+\"/\"+newJobCount ;\r\n        data.sequenceId = newJobCount;\r\n    \r\n    query = \"INSERT INTO `ocean_export_removals` SET  ? \";\r\n    \r\n    \r\n    ormdb.query(query, data ,(err, result,feilds) => {\r\n           if (err) {\r\n               console.error(err);\r\n               res.status(500).send(\"An error occurred while Inserting  data\");\r\n           } else {\r\n          //  updateMasterStatus(mawbNumber,HAWB_NO);\r\n               res.json(result);\r\n           }\r\n       });\r\n    \r\n    });\r\n    };\r\n    \r\n    ","const { ormdb, sqlServerConnectionPool } = require('../../../configuration/db');\r\n\r\nexports.InsertOceanImportRemovals= (req, res) => {\r\n\r\n\r\n    console.log(\"this is Removals Ocean import    insert \"); \r\n          const data =     req.body;\r\n          console.log(\"data \"+data);\r\n    \r\n    const currentDate = new Date();\r\n    const currentYear = currentDate.getFullYear();\r\n    console.log(\"Current Year: \" + currentYear);\r\n    const registerBranchId = data.Register_Branch_Id;\r\n    const mawbNumber = data.MAWB_NO;\r\n    const HAWB_NO = data.HAWB_NO;\r\n    \r\n    const maxJobCountQuery = \" select MAX(sequenceId) as  id from  ocean_import_removals \";\r\n                               \r\n    ormdb.query(maxJobCountQuery, [registerBranchId, currentYear], (err, maxCountResult) => {\r\n        if (err) {\r\n            console.error(err);\r\n            res.status(500).send(\"An error occurred while fetching max JobCount\");\r\n            return;\r\n        }\r\n    \r\n        const maxCount = maxCountResult[0].count || 0; // Handle case where no rows found\r\n        const newJobCount = maxCount + 1;\r\n        \r\n        // Update data object with calculated values\r\n       data.OR_JOB_NO = registerBranchId+\"/OIR\"+currentYear+\"/\"+newJobCount ;\r\n        data.sequenceId = newJobCount;\r\n    \r\n    query = \"INSERT INTO `ocean_import_removals` SET  ? \";\r\n    \r\n    \r\n    ormdb.query(query, data ,(err, result,feilds) => {\r\n           if (err) {\r\n               console.error(err);\r\n               res.status(500).send(\"An error occurred while Inserting  data\");\r\n           } else {\r\n          //  updateMasterStatus(mawbNumber,HAWB_NO);\r\n               res.json(result);\r\n           }\r\n       });\r\n    \r\n    });\r\n    };\r\n    \r\n    ","\r\nconst {ormdb}=require('../../../configuration/db');\r\n\r\n\r\nexports.getAllData= (req, res) => {\r\n  console.log(\"this si reports air export\");\r\n\r\n  \r\n        query = \"SELECT * FROM `air_export_ff` WHERE STR_TO_DATE(`MAWB_DATE`, '%d-%m-%Y') BETWEEN '2024-07-01' AND '2024-07-14';\";\r\n   \r\n ormdb.query(query,  (err, result) => {\r\n        if (err) {\r\n            console.error(err);\r\n            res.status(500).send(\"An error occurred while fetching data\");\r\n        } else {\r\n            res.json(result);\r\n        }\r\n    });\r\n};\r\n\r\n","const { ormdb, sqlServerConnectionPool } = require('../../../configuration/db');\r\nconst sql = require('mssql'); \r\n\r\nexports.getJobData = (req, res) => {\r\n    console.log(\"This is CHA Air import\");\r\n\r\n    const jobNo = req.body.jobNo;\r\n\r\n    if (!jobNo) {\r\n        return res.status(400).send(\"JOB NO. required\");\r\n    }\r\n\r\n    const checkExistenceQuery = \"SELECT Initiator_Name, register_branch, Register_Sub_branch, Created_Date FROM `air_import_custom_brokerage` WHERE `JOB_DOCKET_NO` = ?\";\r\n    const checkExistenceParams = [jobNo];\r\n\r\n    ormdb.query(checkExistenceQuery, checkExistenceParams, (err, result) => {\r\n        if (err) {\r\n            console.error(err);\r\n            return res.status(500).send(\"An error occurred while checking JOB NO. existence\");\r\n        }\r\n\r\n        if (result.length > 0) {\r\n            return res.status(404).send(result);\r\n        } else {\r\n            sqlServerConnectionPool.then(pool => {\r\n                const fetchWithUserQuery = `\r\n                SELECT TOP 1\r\n                    IWR.Job_No,\r\n                    OM.Org_Name,\r\n                    IWR.BE_No,\r\n                    IWR.BE_Date\r\n                FROM [Logisys].dbo.ImpWorkReg IWR\r\n                LEFT JOIN [Logisys].dbo.Organization_Master OM ON IWR.Party_ID = OM.Org_Id\r\n                WHERE IWR.Job_No LIKE @jobNo\r\n            `;\r\n\r\n                pool.request()\r\n                    .input('jobNo', sql.VarChar, jobNo)\r\n                    .query(fetchWithUserQuery)\r\n                    .then(result => {\r\n                        res.json(result.recordset);\r\n                    })\r\n                    .catch(err => {\r\n                        console.error(err);\r\n                        return res.status(500).send(\"An error occurred while fetching data from SQL Server\");\r\n                    });\r\n            }).catch(err => {\r\n                console.error(err);\r\n                res.status(500).send(\"Failed to connect to SQL Server\");\r\n            });\r\n        }\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\nexports.InsertChaAimport= (req, res) => {\r\n\r\n\r\n    console.log(\"this is CHA aIr import  insert \"); \r\n          const data =     req.body;\r\n          console.log(\"data \"+data);\r\n    \r\n    const currentDate = new Date();\r\n    const currentYear = currentDate.getFullYear();\r\n    console.log(\"Current Year: \" + currentYear);\r\n    const registerBranchId = data.Register_Branch_Id;\r\n    const mawbNumber = data.MAWB_NO;\r\n    const HAWB_NO = data.HAWB_NO;\r\n    \r\n    const maxJobCountQuery = \" select MAX(sequenceId) as  id from  saveAirImportCustomBrokerage \";\r\n                               \r\n    ormdb.query(maxJobCountQuery, [registerBranchId, currentYear], (err, maxCountResult) => {\r\n        if (err) {\r\n            console.error(err);\r\n            res.status(500).send(\"An error occurred while fetching max JobCount\");\r\n            return;\r\n        }\r\n    \r\n        const maxCount = maxCountResult[0].count || 0; // Handle case where no rows found\r\n        const newJobCount = maxCount + 1;\r\n        \r\n        // Update data object with calculated values\r\n       data.OR_JOB_NO = registerBranchId+\"/AIC\"+currentYear+\"/\"+newJobCount ;\r\n        data.sequenceId = newJobCount;\r\n    \r\n    query = \"INSERT INTO `air_import_custom_brokerage` SET  ? \";\r\n    \r\n    \r\n    ormdb.query(query, data ,(err, result,feilds) => {\r\n           if (err) {\r\n               console.error(err);\r\n               res.status(500).send(\"An error occurred while Inserting  data\");\r\n           } else {\r\n            updateMasterStatus(mawbNumber,HAWB_NO);\r\n               res.json(result);\r\n           }\r\n       });\r\n    \r\n    });\r\n    };\r\n    \r\n    ","const { ormdb, sqlServerConnectionPool } = require('../../../configuration/db');\r\nconst sql = require('mssql'); \r\n\r\nexports.getJobData = (req, res) => {\r\n    console.log(\"This is CHA Air EXPORT\");\r\n\r\n    const jobNo = req.body.jobNo;\r\n\r\n    if (!jobNo) {\r\n        return res.status(400).send(\"JOB NO. required\");\r\n    }\r\n\r\n    const checkExistenceQuery = \"SELECT Initiator_Name, register_branch, Register_Sub_branch, Created_Date FROM `air_export_custom_brokerage` WHERE `JOB_DOCKET_NO` = ?\";\r\n    const checkExistenceParams = [jobNo];\r\n\r\n    ormdb.query(checkExistenceQuery, checkExistenceParams, (err, result) => {\r\n        if (err) {\r\n            console.error(err);\r\n            return res.status(500).send(\"An error occurred while checking JOB NO. existence\");\r\n        }\r\n\r\n        if (result.length > 0) {\r\n            return res.status(404).send(result);\r\n        } else {\r\n\r\n            console.log(\" job no is not presert in local db \");\r\n            sqlServerConnectionPool.then(pool => {\r\n                const fetchWithUserQuery = `\r\n                SELECT TOP 1\r\n                    IWR.Job_No,\r\n                    OM.Org_Name,\r\n                    IWR.BE_No,\r\n                    IWR.BE_Date\r\n                FROM [Logisys].dbo.ImpWorkReg IWR\r\n                LEFT JOIN [Logisys].dbo.Organization_Master OM ON IWR.Party_ID = OM.Org_Id\r\n                WHERE IWR.Job_No LIKE @jobNo\r\n            `;\r\n\r\n                pool.request()\r\n                    .input('jobNo', sql.VarChar, jobNo)\r\n                    .query(fetchWithUserQuery)\r\n                    .then(result => {\r\n                        res.json(result.recordset);\r\n                    })\r\n                    .catch(err => {\r\n                        console.error(err);\r\n                        return res.status(500).send(\"An error occurred while fetching data from SQL Server\");\r\n                    });\r\n            }).catch(err => {\r\n                console.error(err);\r\n                res.status(500).send(\"Failed to connect to SQL Server\");\r\n            });\r\n        }\r\n    });\r\n};\r\n\r\n\r\nexports.InsertChaExport= (req, res) => {\r\n\r\n\r\n    console.log(\"this is CHA aIr EXport  insert \"); \r\n          const data =     req.body;\r\n          console.log(\"data \"+data);\r\n    \r\n    const currentDate = new Date();\r\n    const currentYear = currentDate.getFullYear();\r\n    console.log(\"Current Year: \" + currentYear);\r\n    const registerBranchId = data.Register_Branch_Id;\r\n    const mawbNumber = data.MAWB_NO;\r\n    const HAWB_NO = data.HAWB_NO;\r\n    \r\n    const maxJobCountQuery = \" select MAX(sequenceId) as  id from  air_export_custom_brokerage \";\r\n                               \r\n    ormdb.query(maxJobCountQuery, [registerBranchId, currentYear], (err, maxCountResult) => {\r\n        if (err) {\r\n            console.error(err);\r\n            res.status(500).send(\"An error occurred while fetching max JobCount\");\r\n            return;\r\n        }\r\n    \r\n        const maxCount = maxCountResult[0].count || 0; // Handle case where no rows found\r\n        const newJobCount = maxCount + 1;\r\n        \r\n        // Update data object with calculated values\r\n       data.OR_JOB_NO = registerBranchId+\"/AEC\"+currentYear+\"/\"+newJobCount ;\r\n        data.sequenceId = newJobCount;\r\n    \r\n    query = \"INSERT INTO `air_export_custom_brokerage` SET  ? \";\r\n    \r\n    \r\n    ormdb.query(query, data ,(err, result,feilds) => {\r\n           if (err) {\r\n               console.error(err);\r\n               res.status(500).send(\"An error occurred while Inserting  data\");\r\n           } else {\r\n            updateMasterStatus(mawbNumber,HAWB_NO);\r\n               res.json(result);\r\n           }\r\n       });\r\n    \r\n    });\r\n    };\r\n    \r\n    ","const { ormdb, sqlServerConnectionPool } = require('../../../configuration/db');\r\nconst sql = require('mssql'); \r\n\r\nexports.getJobData = (req, res) => {\r\n    console.log(\"This is CHA Ocean Export  \");\r\n\r\n    const jobNo = req.body.jobNo;\r\n\r\n    if (!jobNo) {\r\n        return res.status(400).send(\"JOB NO. required\");\r\n    }\r\n\r\n    const checkExistenceQuery = \"SELECT Initiator_Name, register_branch, Register_Sub_branch, Created_Date FROM `ocean_export_custom_brokerage` WHERE `JOB_DOCKET_NO` = ?\";\r\n    const checkExistenceParams = [jobNo];\r\n\r\n    ormdb.query(checkExistenceQuery, checkExistenceParams, (err, result) => {\r\n        if (err) {\r\n            console.error(err);\r\n            return res.status(500).send(\"An error occurred while checking JOB NO. existence\");\r\n        }\r\n\r\n        if (result.length > 0) {\r\n            return res.status(404).send(result);\r\n        } else {\r\n            sqlServerConnectionPool.then(pool => {\r\n                const fetchWithUserQuery = `\r\n                SELECT TOP 1\r\n                    IWR.Job_No,\r\n                    OM.Org_Name,\r\n                    IWR.BE_No,\r\n                    IWR.BE_Date\r\n                FROM [Logisys].dbo.ImpWorkReg IWR\r\n                LEFT JOIN [Logisys].dbo.Organization_Master OM ON IWR.Party_ID = OM.Org_Id\r\n                WHERE IWR.Job_No LIKE @jobNo\r\n            `;\r\n\r\n                pool.request()\r\n                    .input('jobNo', sql.VarChar, jobNo)\r\n                    .query(fetchWithUserQuery)\r\n                    .then(result => {\r\n                        res.json(result.recordset);\r\n                    })\r\n                    .catch(err => {\r\n                        console.error(err);\r\n                        return res.status(500).send(\"An error occurred while fetching data from SQL Server\");\r\n                    });\r\n            }).catch(err => {\r\n                console.error(err);\r\n                res.status(500).send(\"Failed to connect to SQL Server\");\r\n            });\r\n        }\r\n    });\r\n};\r\n\r\n\r\nexports.InsertChaOExport= (req, res) => {\r\n\r\n\r\n    console.log(\"this is CHA Ocean  Export  insert \"); \r\n          const data =     req.body;\r\n          console.log(\"data \"+data);\r\n    \r\n    const currentDate = new Date();\r\n    const currentYear = currentDate.getFullYear();\r\n    console.log(\"Current Year: \" + currentYear);\r\n    const registerBranchId = data.Register_Branch_Id;\r\n    const mawbNumber = data.MAWB_NO;\r\n    const HAWB_NO = data.HAWB_NO;\r\n    \r\n    const maxJobCountQuery = \" select MAX(sequenceId) as  id from  ocean_export_custom_brokerage \";\r\n                               \r\n    ormdb.query(maxJobCountQuery, [registerBranchId, currentYear], (err, maxCountResult) => {\r\n        if (err) {\r\n            console.error(err);\r\n            res.status(500).send(\"An error occurred while fetching max JobCount\");\r\n            return;\r\n        }\r\n    \r\n        const maxCount = maxCountResult[0].count || 0; // Handle case where no rows found\r\n        const newJobCount = maxCount + 1;\r\n        \r\n        // Update data object with calculated values\r\n       data.OR_JOB_NO = registerBranchId+\"/OEC\"+currentYear+\"/\"+newJobCount ;\r\n        data.sequenceId = newJobCount;\r\n    \r\n    query = \"INSERT INTO `ocean_export_custom_brokerage` SET  ? \";\r\n    \r\n    \r\n    ormdb.query(query, data ,(err, result,feilds) => {\r\n           if (err) {\r\n               console.error(err);\r\n               res.status(500).send(\"An error occurred while Inserting  data\");\r\n           } else {\r\n            updateMasterStatus(mawbNumber,HAWB_NO);\r\n               res.json(result);\r\n           }\r\n       });\r\n    \r\n    });\r\n    };\r\n    \r\n    ","const { ormdb, sqlServerConnectionPool } = require('../../../configuration/db');\r\nconst sql = require('mssql'); \r\n\r\nexports.getJobData = (req, res) => {\r\n    console.log(\"This is CHA Ocean  import\");\r\n\r\n    const jobNo = req.body.jobNo;\r\n\r\n    if (!jobNo) {\r\n        return res.status(400).send(\"JOB NO. required\");\r\n    }\r\n\r\n    const checkExistenceQuery = \"SELECT Initiator_Name, register_branch, Register_Sub_branch, Created_Date FROM `ocean_import_custom_brokerage` WHERE `JOB_DOCKET_NO` = ?\";\r\n    const checkExistenceParams = [jobNo];\r\n\r\n    ormdb.query(checkExistenceQuery, checkExistenceParams, (err, result) => {\r\n        if (err) {\r\n            console.error(err);\r\n            return res.status(500).send(\"An error occurred while checking JOB NO. existence\");\r\n        }\r\n\r\n        if (result.length > 0) {\r\n            return res.status(404).send(result);\r\n        } else {\r\n            sqlServerConnectionPool.then(pool => {\r\n                const fetchWithUserQuery = `\r\n                SELECT TOP 1\r\n                    IWR.Job_No,\r\n                    OM.Org_Name,\r\n                    IWR.BE_No,\r\n                    IWR.BE_Date\r\n                FROM [Logisys].dbo.ImpWorkReg IWR\r\n                LEFT JOIN [Logisys].dbo.Organization_Master OM ON IWR.Party_ID = OM.Org_Id\r\n                WHERE IWR.Job_No LIKE @jobNo\r\n            `;\r\n\r\n                pool.request()\r\n                    .input('jobNo', sql.VarChar, jobNo)\r\n                    .query(fetchWithUserQuery)\r\n                    .then(result => {\r\n                        res.json(result.recordset);\r\n                    })\r\n                    .catch(err => {\r\n                        console.error(err);\r\n                        return res.status(500).send(\"An error occurred while fetching data from SQL Server\");\r\n                    });\r\n            }).catch(err => {\r\n                console.error(err);\r\n                res.status(500).send(\"Failed to connect to SQL Server\");\r\n            });\r\n        }\r\n    });\r\n};\r\n\r\n\r\nexports.InsertChaOimport= (req, res) => {\r\n\r\n\r\n\r\n    console.log(\"this is CHA Ocean  import  insert \"); \r\n          const data =     req.body;\r\n          console.log(\"data \"+data);\r\n    \r\n    const currentDate = new Date();\r\n    const currentYear = currentDate.getFullYear();\r\n    console.log(\"Current Year: \" + currentYear);\r\n    const registerBranchId = data.Register_Branch_Id;\r\n    const mawbNumber = data.MAWB_NO;\r\n    const HAWB_NO = data.HAWB_NO;\r\n    \r\n    const maxJobCountQuery = \" select MAX(sequenceId) as  id from  ocean_import_custom_brokerage \";\r\n                               \r\n    ormdb.query(maxJobCountQuery, [registerBranchId, currentYear], (err, maxCountResult) => {\r\n        if (err) {\r\n            console.error(err);\r\n            res.status(500).send(\"An error occurred while fetching max JobCount\");\r\n            return;\r\n        }\r\n    \r\n        const maxCount = maxCountResult[0].count || 0; // Handle case where no rows found\r\n        const newJobCount = maxCount + 1;\r\n        \r\n        // Update data object with calculated values\r\n       data.OR_JOB_NO = registerBranchId+\"/OIC\"+currentYear+\"/\"+newJobCount ;\r\n        data.sequenceId = newJobCount;\r\n    \r\n    query = \"INSERT INTO `ocean_import_custom_brokerage` SET  ? \";\r\n    \r\n    \r\n    ormdb.query(query, data ,(err, result,feilds) => {\r\n           if (err) {\r\n               console.error(err);\r\n               res.status(500).send(\"An error occurred while Inserting  data\");\r\n           } else {\r\n            updateMasterStatus(mawbNumber,HAWB_NO);\r\n               res.json(result);\r\n           }\r\n       });\r\n    \r\n    });\r\n    };\r\n    \r\n    ","\r\nconst {ormdb,leavemanagement,test}=require('../../../configuration/db');\r\nexports.getAllMaster= (req, res) => {\r\n    const mawbNumber = req.body.MAWB_NO;\r\n    let query;\r\n    let queryParams = [];\r\n    console.log(mawbNumber);\r\n\r\n    if (mawbNumber) {\r\n        query = \"SELECT DISTINCT  MAWB_BL_NO FROM `airexport_ff_ftp` WHERE `MAWB_BL_NO` LIKE ? AND flag =0 \";\r\n        queryParams = [`%${mawbNumber}%`];\r\n    } else {\r\n        query = \"SELECT DISTINCT MAWB_BL_NO FROM `airexport_ff_ftp` \";\r\n    }\r\n ormdb.query(query, queryParams, (err, result) => {\r\n        if (err) {\r\n            console.error(err);\r\n            res.status(500).send(\"An error occurred while fetching data\");\r\n        } else {\r\n            res.json(result);\r\n        }\r\n    });\r\n};\r\n\r\n\r\nexports.getAllMasterFromFF= (req, res) => {\r\n    const mawbNumber = req.body.MAWB_NO;\r\n    let query;\r\n    let queryParams = [];\r\n    console.log(mawbNumber);\r\n\r\n    if (mawbNumber) {\r\n        query = \"SELECT DISTINCT  MAWB_NO FROM `air_export_ff` WHERE `MAWB_NO` LIKE ? \";\r\n        queryParams = [`%${mawbNumber}%`];\r\n    } else {\r\n        query = \"SELECT DISTINCT MAWB_NO FROM `air_export_ff` \";\r\n    }\r\n ormdb.query(query, queryParams, (err, result) => {\r\n        if (err) {\r\n            console.error(err);\r\n            res.status(500).send(\"An error occurred while fetching data\");\r\n        } else {\r\n            res.json(result);\r\n        }\r\n    });\r\n};\r\n\r\nexports.getMasterData = (req, res) => {\r\n   // const mawbNumber = req.query.MAWB_NO;\r\n    const mawbNumber = req.body.MAWB_NO;\r\n\r\n    if (!mawbNumber) {\r\n        return res.status(400).send(\"MAWB_NO  required\");\r\n    }\r\n\r\n    let checkExistenceQuery = \"SELECT * FROM `airexport_ff_ftp` WHERE `MAWB_BL_NO` = ?\";\r\n    // let checkExistenceParams = [`%${mawbNumber}%`];\r\n    let checkExistenceParams = [mawbNumber];\r\n\r\n    ormdb.query(checkExistenceQuery, checkExistenceParams, (err, result) => {\r\n        if (err) {\r\n            console.error(err);\r\n            return res.status(500).send(\"An error occurred while checking MAWB_NO existence\");\r\n        }\r\n\r\n        if (result.length === 0) {\r\n            return res.status(404).send(\"No records found for the provided MAWB_NO\");\r\n        }\r\n\r\n      let checkFlagQuery = \"SELECT * FROM `airexport_ff_ftp` LEFT JOIN newins_iata_codes on DSCODE=DESTINATION_CITY  WHERE `MAWB_BL_NO` = ? AND flag = 0 \";\r\n        let checkFlagParams = [mawbNumber];\r\n\r\n        ormdb.query(checkFlagQuery, checkFlagParams, (err, result) => {\r\n            if (err) {\r\n                console.error(err);\r\n                return res.status(500).send(\"An error occurred while checking flags\");\r\n            }\r\n\r\n            if (result.length > 0) {\r\n                // If there are records with flag=0, return them\r\n                return res.json(result);\r\n            } else {\r\n                // If all records have flag=1, fetch the records along with the user names\r\n                let fetchWithUserQuery = `\r\n                  \r\n                    SELECT Initiator_Name, Register_Branch_Id, Register_Sub_branch,Created_Date FROM air_export_ff WHERE MAWB_NO =? AND flag = 1\r\n                    LIMIT 1 ;\r\n                `;\r\n                let fetchWithUserParams = [mawbNumber];\r\n\r\n                ormdb.query(fetchWithUserQuery, fetchWithUserParams, (err, result) => {\r\n                    if (err) {\r\n                        console.error(err);\r\n                        return res.status(500).send(\"An error occurred while fetching data with user names\");\r\n                    }\r\n                    res.json(result);\r\n                });\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\n// const getJobCount=(req,res)=>{\r\n//     console.log(\"tjhis is job count \");\r\n\r\n//         const query =\"SELECT Max(JobCount) as count FROM `air_export_ff` WHERE `Register_Branch_Id`='30' and YEAR(Created_Date)='2024' \";\r\n//     ormdb.query(query ,(err, result,feilds) => {\r\n//            if (err) {\r\n//                console.error(err);\r\n//                res.status(500).send(\"An error occurred while Inserting  data\");\r\n//            } else {\r\n//                res.json(result);\r\n//            }\r\n//        });\r\n// }\r\n\r\nconst updateMasterStatus=(mawbNumber ,hawb)=>{\r\n        console.log(\"this is update \");\r\n        data=[mawbNumber,hawb];\r\n    const query =\"UPDATE airexport_ff_ftp SET  flag='1' where MAWB_BL_NO =? AND MASTER_HOUSE_BL =? \";\r\n    ormdb.query(query,data ,(err, result,feilds) => {\r\n           if (err) {\r\n               console.error(err);\r\n             //  res.status(500).send(\"An error occurred while Inserting  data\");\r\n           } else {\r\n            console.log(\"MAWB_BL_NO \" +mawbNumber +\"  ANd hawb \"+hawb + \" Status has been chnaged \");\r\n              // res.json(result);\r\n           }\r\n       });\r\n\r\n}\r\n\r\nexports.UpdateDataFF = (req, res) => {\r\n    console.log(\"Updating data in the air_export_ff table\");\r\n\r\n    // Extract data from the request body\r\n    const {\r\n        BUYING_RATE,\r\n        CUSTOMS_CLEARANCE_DATE,\r\n        DUE_CARRIER,\r\n        FREIGHT_AMOUNT,\r\n        IATA_AGENT,\r\n        Industry,\r\n        MARGIN_KG,\r\n        MainProduct,\r\n        NETDUE,\r\n        OperationPic,\r\n        REMARKS,\r\n        SELL_RATE,\r\n        SHIPPER_INVOICE_NO,\r\n        SHIPPING_BILL_DATE,\r\n        SHIPPING_BILL_NO,\r\n        SUB_AGENT,\r\n        SalesPic,\r\n        TOTAL_MARGIN,\r\n        cha,\r\n        clearanceDoneBy,\r\n        salesPicBranch\r\n    } = req.body;\r\n\r\n    const mawbNumber = req.body.MAWB_NO; \r\n    const hawb = req.body.HAWB_NO;  \r\n\r\n    // Prepare the query and data\r\n    const query = `\r\n        UPDATE air_export_ff SET \r\n            BUYING_RATE = ?, \r\n            CUSTOMS_CLEARANCE_DATE = ?, \r\n            DUE_CARRIER = ?, \r\n            FREIGHT_AMOUNT = ?, \r\n            IATA_AGENT = ?, \r\n            Industry = ?, \r\n            MARGIN_KG = ?, \r\n            MainProduct = ?, \r\n            NETDUE = ?, \r\n            OperationPic = ?, \r\n            REMARKS = ?, \r\n            SELL_RATE = ?, \r\n            SHIPPER_INVOICE_NO = ?, \r\n            SHIPPING_BILL_DATE = ?, \r\n            SHIPPING_BILL_NO = ?, \r\n            SUB_AGENT = ?, \r\n            SalesPic = ?, \r\n            TOTAL_MARGIN = ?, \r\n            cha = ?, \r\n            clearanceDoneBy = ?, \r\n            salesPicBranch = ?\r\n        WHERE MAWB_NO = ? `;\r\n\r\n    const data = [\r\n        BUYING_RATE,\r\n        CUSTOMS_CLEARANCE_DATE,\r\n        DUE_CARRIER,\r\n        FREIGHT_AMOUNT,\r\n        IATA_AGENT,\r\n        Industry,\r\n        MARGIN_KG,\r\n        MainProduct,\r\n        NETDUE,\r\n        OperationPic,\r\n        REMARKS,\r\n        SELL_RATE,\r\n        SHIPPER_INVOICE_NO,\r\n        SHIPPING_BILL_DATE,\r\n        SHIPPING_BILL_NO,\r\n        SUB_AGENT,\r\n        SalesPic,\r\n        TOTAL_MARGIN,\r\n        cha,\r\n        clearanceDoneBy,\r\n        salesPicBranch,\r\n        mawbNumber\r\n    ];\r\n    if (hawb) {\r\n        query += \" AND HAWB_NO = ?\";\r\n        data.push(hawb);\r\n    }\r\n\r\n    \r\n\r\n    // Execute the query\r\n    ormdb.query(query, data, (err, result, fields) => {\r\n        if (err) {\r\n            console.error(err);\r\n            res.status(500).send(\"An error occurred while updating the data\");\r\n        } else {\r\n            console.log(`MAWB_BL_NO ${mawbNumber} and MASTER_HOUSE_BL ${hawb} status have been updated`);\r\n            res.json({ success: true, message: \"Data updated successfully\" });\r\n        }\r\n    });\r\n}\r\n\r\nexports.InsertAExport= (req, res) => {\r\n\r\n\r\n    console.log(\"this is insert \"); \r\n          const data =     req.body;\r\n          console.log(\"data \"+data);\r\n\r\n    const currentDate = new Date();\r\n    const currentYear = currentDate.getFullYear();\r\n    console.log(\"Current Year: \" + currentYear);\r\n    const registerBranchId = data.Register_Branch_Id;\r\n    const mawbNumber = data.MAWB_NO;\r\n    const HAWB_NO = data.HAWB_NO;\r\n\r\n const maxJobCountQuery = \"SELECT MAX(JobCount) as count FROM `air_export_ff` WHERE `Register_Branch_Id`=? AND YEAR(Created_Date)=?\";\r\n\r\n    ormdb.query(maxJobCountQuery, [registerBranchId, currentYear], (err, maxCountResult) => {\r\n        if (err) {\r\n            console.error(err);\r\n            res.status(500).send(\"An error occurred while fetching max JobCount\");\r\n            return;\r\n        }\r\n    \r\n        const maxCount = maxCountResult[0].count || 0; // Handle case where no rows found\r\n        const newJobCount = maxCount + 1;\r\n\r\n        // Update data object with calculated values\r\n       data.JOB_DOCKETNO = \"AEF/\"+registerBranchId+\"/\"+currentYear+\"/\"+newJobCount;\r\n        data.JobCount = newJobCount;\r\n\r\n    query = \"INSERT INTO `air_export_ff` SET  ? \";\r\n\r\n   \r\n    ormdb.query(query, data ,(err, result,feilds) => {\r\n           if (err) {\r\n               console.error(err);\r\n               res.status(500).send(\"An error occurred while Inserting  data\");\r\n           } else {\r\n            updateMasterStatus(mawbNumber,HAWB_NO);\r\n               res.json(result);\r\n           }\r\n       });\r\n    \r\n    });\r\n};\r\n\r\n\r\nexports.getMasterDataFromFF = (req, res) => {\r\n    // const mawbNumber = req.query.MAWB_NO;\r\n     const mawbNumber = req.body.MAWB_NO;\r\n \r\n     if (!mawbNumber) {\r\n         return res.status(400).send(\"MAWB_NO  required\");\r\n     }\r\n \r\n     let checkExistenceQuery = \"SELECT * FROM `air_export_ff` WHERE `MAWB_NO` = ?\";\r\n     // let checkExistenceParams = [`%${mawbNumber}%`];\r\n     let checkExistenceParams = [mawbNumber];\r\n \r\n     ormdb.query(checkExistenceQuery, checkExistenceParams, (err, result) => {\r\n         if (err) {\r\n             console.error(err);\r\n             return res.status(500).send(\"An error occurred while checking MAWB_NO existence\");\r\n         }\r\n \r\n         if (result.length === 0) {\r\n             return res.status(404).send(\"No records found for the provided MAWB_NO\");\r\n         }\r\n\r\n         else{\r\n            res.json(result);\r\n         }\r\n\r\n       \r\n     });\r\n }","\r\nconst {ormdb,leavemanagement,test,sqlServerConnection}=require('../../../configuration/db');\r\nconst sendEmail = require('../../Listners/sendmail');\r\n\r\n\r\nexports.getAllIndustry= (req, res) => {\r\n\r\n\r\n\r\n        query = \"SELECT * FROM `updatedindustryas` \";\r\n    \r\n ormdb.query(query, (err, result) => {\r\n        if (err) {\r\n            console.error(err);\r\n            res.status(500).send(\"An error occurred while fetching data\");\r\n        } else {\r\n            // sendEmail(\r\n            //     'Manish',\r\n            //     'manish.kumar@nipponexpress.com',\r\n            //     'manish.kumar@nipponexpress.com',\r\n            //     '<h1>Hello World</h1>',\r\n            //     'Test Subject'\r\n            // );\r\n            res.json(result);\r\n        }\r\n    });\r\n};\r\nexports.getAllUser= (req, res) => {\r\n\r\n        query = \"SELECT u.`user_name`,u.`emp_id`,u.`branch_id`,b.branch_name FROM leavemanagement.`user` u  \"+\r\n\t\t\t\t \" inner join leavemanagement.branchmaster b on b.branch_id=u.branch_id  \"+\r\n\t\t\t\t \" WHERE  u.`employee_status`='yes' \";\r\n    \r\n leavemanagement.query(query, (err, result) => {\r\n        if (err) {\r\n            console.error(err);\r\n            res.status(500).send(\"An error occurred while fetching data\");\r\n        } else {\r\n            res.json(result);\r\n        }\r\n    });\r\n};\r\n\r\n\r\n\r\nexports.getAllMaster= (req, res) => {\r\n    const mawbNumber = req.body.MAWB_NO;\r\n    let query;\r\n    let queryParams = [];\r\n    console.log(mawbNumber);\r\n\r\n    if (mawbNumber) {\r\n        query = \"SELECT DISTINCT  MAWB_NO FROM `airimport_ff_ftp` WHERE `MAWB_NO` LIKE ?  AND flag =0\";\r\n        queryParams = [`%${mawbNumber}%`];\r\n    } else {\r\n        query = \"SELECT DISTINCT MAWB_NO FROM `airimport_ff_ftp` \";\r\n    }\r\n ormdb.query(query, queryParams, (err, result) => {\r\n        if (err) {\r\n            console.error(err);\r\n            res.status(500).send(\"An error occurred while fetching data\");\r\n        } else {\r\n            res.json(result);\r\n        }\r\n    });\r\n};\r\n\r\n\r\nexports.getMasterData = (req, res) => {\r\n   // const mawbNumber = req.query.MAWB_NO;\r\n    const mawbNumber = req.body.MAWB_NO;\r\n\r\n    if (!mawbNumber) {\r\n        return res.status(400).send(\"MAWB_NO  required\");\r\n    }\r\n\r\n    let checkExistenceQuery = \"SELECT * FROM `airimport_ff_ftp` WHERE `MAWB_NO` = ?  \";\r\n    // let checkExistenceParams = [`%${mawbNumber}%`];\r\n    let checkExistenceParams = [mawbNumber];\r\n\r\n    ormdb.query(checkExistenceQuery, checkExistenceParams, (err, result) => {\r\n        if (err) {\r\n            console.error(err);\r\n            return res.status(500).send(\"An error occurred while checking MAWB_NO existence\");\r\n        }\r\n\r\n        if (result.length === 0) {\r\n            return res.status(404).send(\"No records found for the provided MAWB_NO\");\r\n        }\r\n\r\n      let checkFlagQuery = \"SELECT * FROM `airimport_ff_ftp` INNER JOIN newins_iata_codes on DSCODE=ORIGIN  WHERE `MAWB_NO` = ? AND flag = 0\";\r\n        let checkFlagParams = [mawbNumber];\r\n\r\n        ormdb.query(checkFlagQuery, checkFlagParams, (err, result) => {\r\n            if (err) {\r\n                console.error(err);\r\n                return res.status(500).send(\"An error occurred while checking flags\");\r\n            }\r\n\r\n            if (result.length > 0) {\r\n                // If there are records with flag=0, return them\r\n                return res.json(result);\r\n            } else {\r\n                // If all records have flag=1, fetch the records along with the user names\r\n                let fetchWithUserQuery = `\r\n                  \r\n                    SELECT Initiator_Name, Register_Branch_Id, Register_Sub_branch,Created_Date FROM air_import_ff WHERE MAWB_NO =? AND flag = 1\r\n                    LIMIT 1 ;\r\n                `;\r\n                let fetchWithUserParams = [mawbNumber];\r\n\r\n                ormdb.query(fetchWithUserQuery, fetchWithUserParams, (err, result) => {\r\n                    if (err) {\r\n                        console.error(err);\r\n                        return res.status(500).send(\"An error occurred while fetching data with user names\");\r\n                    }\r\n                    res.json(result);\r\n                });\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\n\r\n\r\nconst updateMasterStatus=(mawbNumber ,hawb)=>{\r\n    console.log(\"this is update \");\r\n    data=[mawbNumber,hawb];\r\nconst query =\"UPDATE airimport_ff_ftp SET  flag='1' where MAWB_NO =? AND HAWB_NO =? \";\r\normdb.query(query,data ,(err, result,feilds) => {\r\n       if (err) {\r\n           console.error(err);\r\n         //  res.status(500).send(\"An error occurred while Inserting  data\");\r\n       } else {\r\n        console.log(\"MAWB_NO \" +mawbNumber +\"  ANd hawb \"+hawb + \" Status has been chnaged \");\r\n          // res.json(result);\r\n       }\r\n   });\r\n\r\n}\r\n\r\nexports.InsertAExport= (req, res) => {\r\n\r\n\r\nconsole.log(\"this is aIr import  insert \"); \r\n      const data =     req.body;\r\n      console.log(\"data \"+data);\r\n\r\nconst currentDate = new Date();\r\nconst currentYear = currentDate.getFullYear();\r\nconsole.log(\"Current Year: \" + currentYear);\r\nconst registerBranchId = data.Register_Branch_Id;\r\nconst mawbNumber = data.MAWB_NO;\r\nconst HAWB_NO = data.HAWB_NO;\r\n\r\nconst maxJobCountQuery = \"SELECT MAX(JobCount) as count FROM `air_import_ff` WHERE `Register_Branch_Id`=? AND YEAR(Created_Date)=?\";\r\n\r\normdb.query(maxJobCountQuery, [registerBranchId, currentYear], (err, maxCountResult) => {\r\n    if (err) {\r\n        console.error(err);\r\n        res.status(500).send(\"An error occurred while fetching max JobCount\");\r\n        return;\r\n    }\r\n\r\n    const maxCount = maxCountResult[0].count || 0; // Handle case where no rows found\r\n    const newJobCount = maxCount + 1;\r\n\r\n    // Update data object with calculated values\r\n   data.JOB_DOCKETNO = \"AIF/\"+registerBranchId+\"/\"+currentYear+\"/\"+newJobCount;\r\n    data.JobCount = newJobCount;\r\n\r\nquery = \"INSERT INTO `air_import_ff` SET  ? \";\r\n\r\n\r\normdb.query(query, data ,(err, result,feilds) => {\r\n       if (err) {\r\n           console.error(err);\r\n           res.status(500).send(\"An error occurred while Inserting  data\");\r\n       } else {\r\n        updateMasterStatus(mawbNumber,HAWB_NO);\r\n           res.json(result);\r\n       }\r\n   });\r\n\r\n});\r\n};\r\n\r\n\r\nexports.getAllHawb= (req, res) => {\r\n    const mawbNumber = req.body.MAWB_NO;\r\n    let query;\r\n    let queryParams = [];\r\n    console.log(mawbNumber);\r\n\r\n    if (mawbNumber) {\r\n        query = \"SELECT DISTINCT  MAWB_NO FROM `air_import_ff` WHERE `MAWB_NO` LIKE ?  AND flag =0\";\r\n        queryParams = [`%${mawbNumber}%`];\r\n    } else {\r\n        query = \"SELECT DISTINCT MAWB_NO FROM `air_import_ff` \";\r\n    }\r\n ormdb.query(query, queryParams, (err, result) => {\r\n        if (err) {\r\n            console.error(err);\r\n            res.status(500).send(\"An error occurred while fetching data\");\r\n        } else {\r\n            res.json(result);\r\n        }\r\n    });\r\n};\r\n\r\n\r\nexports.getHawbData = (req, res) => {\r\n   // const mawbNumber = req.query.MAWB_NO;\r\n    const mawbNumber = req.body.MAWB_NO;\r\n\r\n    if (!mawbNumber) {\r\n        return res.status(400).send(\"MAWB_NO  required\");\r\n    }\r\n\r\n    let checkExistenceQuery = \"SELECT * FROM `air_import_ff` WHERE `MAWB_NO` = ?  \";\r\n    // let checkExistenceParams = [`%${mawbNumber}%`];\r\n    let checkExistenceParams = [mawbNumber];\r\n\r\n    ormdb.query(checkExistenceQuery, checkExistenceParams, (err, result) => {\r\n        if (err) {\r\n            console.error(err);\r\n            return res.status(500).send(\"An error occurred while checking MAWB_NO existence\");\r\n        }\r\n\r\n        if (result.length === 0) {\r\n            return res.status(404).send(\"No records found for the provided MAWB_NO\");\r\n        }\r\n\r\n      let checkFlagQuery = \"SELECT * FROM `air_import_ff`   WHERE `MAWB_NO` = ? \";\r\n        let checkFlagParams = [mawbNumber];\r\n\r\n        ormdb.query(checkFlagQuery, checkFlagParams, (err, result) => {\r\n            if (err) {\r\n                console.error(err);\r\n                return res.status(500).send(\"An error occurred while checking flags\");\r\n            }\r\n\r\n            if (result.length > 0) {\r\n                // If there are records with flag=0, return them\r\n                return res.json(result);\r\n            } else {\r\n                // If all records have flag=1, fetch the records along with the user names\r\n                let fetchWithUserQuery = `\r\n                  \r\n                    SELECT Initiator_Name, Register_Branch_Id, Register_Sub_branch,Created_Date FROM air_import_ff WHERE MAWB_NO =? AND flag = 1\r\n                    LIMIT 1 ;\r\n                `;\r\n                let fetchWithUserParams = [mawbNumber];\r\n\r\n                ormdb.query(fetchWithUserQuery, fetchWithUserParams, (err, result) => {\r\n                    if (err) {\r\n                        console.error(err);\r\n                        return res.status(500).send(\"An error occurred while fetching data with user names\");\r\n                    }\r\n                    res.json(result);\r\n                });\r\n            }\r\n        });\r\n    });\r\n}","\r\nconst {ormdb}=require('../../../configuration/db');\r\n\r\n\r\nexports.getAllMaster= (req, res) => {\r\n    const mawbNumber = req.body.MAWB_NO;\r\n    let query;\r\n    let queryParams = [];\r\n    console.log(mawbNumber);\r\n\r\n    if (mawbNumber) {\r\n        query = \"SELECT DISTINCT  MBL_No FROM `ocean_export_ff_ftp` WHERE `MBL_No` LIKE ?  AND flag =0\";\r\n        queryParams = [`%${mawbNumber}%`];\r\n    } else {\r\n        query = \"SELECT DISTINCT MBL_No FROM `ocean_export_ff_ftp` WHERE flag =0 \";\r\n    }\r\n ormdb.query(query, queryParams, (err, result) => {\r\n        if (err) {\r\n            console.error(err);\r\n            res.status(500).send(\"An error occurred while fetching data\");\r\n        } else {\r\n            res.json(result);\r\n        }\r\n    });\r\n};\r\n\r\n\r\nexports.getMasterData = (req, res) => {\r\n   // const mawbNumber = req.query.MAWB_NO;\r\n    const mawbNumber = req.body.MAWB_NO;\r\n\r\n    if (!mawbNumber) {\r\n        return res.status(400).send(\"MBL  required\");\r\n    }\r\n\r\n    let checkExistenceQuery = \"SELECT * FROM `ocean_export_ff_ftp` WHERE `MBL_No` = ?  \";\r\n    // let checkExistenceParams = [`%${mawbNumber}%`];\r\n    let checkExistenceParams = [mawbNumber];\r\n\r\n    ormdb.query(checkExistenceQuery, checkExistenceParams, (err, result) => {\r\n        if (err) {\r\n            console.error(err);\r\n            return res.status(500).send(\"An error occurred while checking MBL existence\");\r\n        }\r\n\r\n        if (result.length === 0) {\r\n            return res.status(404).send(\"No records found for the provided MBL\");\r\n        }\r\n\r\n      let checkFlagQuery = \"SELECT * FROM `ocean_export_ff_ftp`   WHERE `MBL_No` = ? AND flag = 0\";\r\n        let checkFlagParams = [mawbNumber];\r\n\r\n        ormdb.query(checkFlagQuery, checkFlagParams, (err, result) => {\r\n            if (err) {\r\n                console.error(err);\r\n                return res.status(500).send(\"An error occurred while checking flags\");\r\n            }\r\n\r\n            if (result.length > 0) {\r\n                // If there are records with flag=0, return them\r\n                return res.json(result);\r\n            } else {\r\n            \r\n                // If all records have flag=1, fetch the records along with the user names\r\n                let fetchWithUserQuery = ` SELECT Initiator_Name, Register_Branch_Id, Register_Sub_branch,Created_Date FROM ocean_export_ff WHERE MBL_NO =? AND flag = 1    LIMIT 1 `;\r\n                let fetchWithUserParams = [mawbNumber];\r\n\r\n                ormdb.query(fetchWithUserQuery, fetchWithUserParams, (err, result) => {\r\n                    if (err) {\r\n                        console.error(err);\r\n                        return res.status(500).send(\"An error occurred while fetching data with user names\");\r\n                    }\r\n                    res.json(result);\r\n                });\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\n\r\n\r\nconst updateMasterStatus=(mawbNumber ,hawb)=>{\r\n    console.log(\"this is update \");\r\n    data=[mawbNumber,hawb];\r\nconst query =\"UPDATE ocean_export_ff_ftp SET  flag='1' where MBL_No =? AND HBL_No =? \";\r\normdb.query(query,data ,(err, result,feilds) => {\r\n       if (err) {\r\n           console.error(err);\r\n         //  res.status(500).send(\"An error occurred while Inserting  data\");\r\n       } else {\r\n        console.log(\"MBL_No \" +mawbNumber +\"  ANd HBL_No \"+hawb + \" Status has been chnaged \");\r\n          // res.json(result);\r\n       }\r\n   });\r\n\r\n}\r\n\r\nexports.InsertOExport= (req, res) => {\r\n\r\n\r\nconsole.log(\"this is Ocean  import  insert \"); \r\n      const data =     req.body;\r\n      console.log(\"data \"+data);\r\n\r\nconst currentDate = new Date();\r\nconst currentYear = currentDate.getFullYear();\r\nconsole.log(\"Current Year: \" + currentYear);\r\nconst registerBranchId = data.Register_Branch_Id;\r\nconst mawbNumber = data.MAWB_NO;\r\nconst HAWB_NO = data.HAWB_NO;\r\n\r\nconst maxJobCountQuery = \"SELECT MAX(JobCount) as count FROM `ocean_export_ff` WHERE `Register_Branch_Id`=? AND YEAR(Created_Date)=?\";\r\n\r\normdb.query(maxJobCountQuery, [registerBranchId, currentYear], (err, maxCountResult) => {\r\n    if (err) {\r\n        console.error(err);\r\n        res.status(500).send(\"An error occurred while fetching max JobCount\");\r\n        return;\r\n    }\r\n\r\n    const maxCount = maxCountResult[0].count || 0; // Handle case where no rows found\r\n    const newJobCount = maxCount + 1;\r\n\r\n    // Update data object with calculated values\r\n   data.JOB_DOCKETNO = \"OIF/\"+registerBranchId+\"/\"+currentYear+\"/\"+newJobCount;\r\n    data.JobCount = newJobCount;\r\n\r\nquery = \"INSERT INTO `ocean_export_ff` SET  ? \";\r\n\r\n\r\normdb.query(query, data ,(err, result,feilds) => {\r\n       if (err) {\r\n           console.error(err);\r\n           res.status(500).send(\"An error occurred while Inserting  data\");\r\n       } else {\r\n        updateMasterStatus(mawbNumber,HAWB_NO);\r\n           res.json(result);\r\n       }\r\n   });\r\n\r\n});\r\n};\r\n\r\n","\r\nconst {ormdb}=require('../../../configuration/db');\r\n\r\n\r\nexports.getAllMaster= (req, res) => {\r\n    const mawbNumber = req.body.MAWB_NO;\r\n    let query;\r\n    let queryParams = [];\r\n    console.log(mawbNumber);\r\n\r\n    if (mawbNumber) {\r\n        query = \"SELECT DISTINCT  MBL_No FROM `ocean_import_ff_ftp` WHERE `MBL_No` LIKE ?  AND flag =0\";\r\n        queryParams = [`%${mawbNumber}%`];\r\n    } else {\r\n        query = \"SELECT DISTINCT MBL_No FROM `ocean_import_ff_ftp` WHERE flag =0 \";\r\n    }\r\n ormdb.query(query, queryParams, (err, result) => {\r\n        if (err) {\r\n            console.error(err);\r\n            res.status(500).send(\"An error occurred while fetching data\");\r\n        } else {\r\n            res.json(result);\r\n        }\r\n    });\r\n};\r\n\r\n\r\nexports.getMasterData = (req, res) => {\r\n   // const mawbNumber = req.query.MAWB_NO;\r\n    const mawbNumber = req.body.MAWB_NO;\r\n\r\n    if (!mawbNumber) {\r\n        return res.status(400).send(\"MBL  required\");\r\n    }\r\n\r\n    let checkExistenceQuery = \"SELECT * FROM `ocean_import_ff_ftp` WHERE `MBL_No` = ?  \";\r\n    // let checkExistenceParams = [`%${mawbNumber}%`];\r\n    let checkExistenceParams = [mawbNumber];\r\n\r\n    ormdb.query(checkExistenceQuery, checkExistenceParams, (err, result) => {\r\n        if (err) {\r\n            console.error(err);\r\n            return res.status(500).send(\"An error occurred while checking MBL existence\");\r\n        }\r\n\r\n        if (result.length === 0) {\r\n            return res.status(404).send(\"No records found for the provided MBL\");\r\n        }\r\n\r\n      let checkFlagQuery = \"SELECT * FROM `ocean_import_ff_ftp`   WHERE `MBL_No` = ? AND flag = 0\";\r\n        let checkFlagParams = [mawbNumber];\r\n\r\n        ormdb.query(checkFlagQuery, checkFlagParams, (err, result) => {\r\n            if (err) {\r\n                console.error(err);\r\n                return res.status(500).send(\"An error occurred while checking flags\");\r\n            }\r\n\r\n            if (result.length > 0) {\r\n                // If there are records with flag=0, return them\r\n                return res.json(result);\r\n            } else {\r\n                // If all records have flag=1, fetch the records along with the user names\r\n                let fetchWithUserQuery = `\r\n                  \r\n                    SELECT Initiator_Name, Register_Branch_Id, Register_Sub_branch,Created_Date FROM ocean_import_ff WHERE MBL_NO =? AND flag = 1\r\n                    LIMIT 1 ;\r\n                `;\r\n                let fetchWithUserParams = [mawbNumber];\r\n\r\n                ormdb.query(fetchWithUserQuery, fetchWithUserParams, (err, result) => {\r\n                    if (err) {\r\n                        console.error(err);\r\n                        return res.status(500).send(\"An error occurred while fetching data with user names\");\r\n                    }\r\n                    res.json(result);\r\n                });\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\n\r\n\r\nconst updateMasterStatus=(mawbNumber ,hawb)=>{\r\n    console.log(\"this is update \");\r\n    data=[mawbNumber,hawb];\r\nconst query =\"UPDATE ocean_import_ff_ftp SET  flag='1' where MBL_No =? AND HBL_No =? \";\r\normdb.query(query,data ,(err, result,feilds) => {\r\n       if (err) {\r\n           console.error(err);\r\n         //  res.status(500).send(\"An error occurred while Inserting  data\");\r\n       } else {\r\n        console.log(\"MBL_No \" +mawbNumber +\"  ANd HBL_No \"+hawb + \" Status has been chnaged \");\r\n          // res.json(result);\r\n       }\r\n   });\r\n\r\n}\r\n\r\nexports.InsertOImport= (req, res) => {\r\n\r\n\r\nconsole.log(\"this is Ocean  import  insert \"); \r\n      const data =     req.body;\r\n      console.log(\"data \"+data);\r\n\r\nconst currentDate = new Date();\r\nconst currentYear = currentDate.getFullYear();\r\nconsole.log(\"Current Year: \" + currentYear);\r\nconst registerBranchId = data.Register_Branch_Id;\r\nconst mawbNumber = data.MAWB_NO;\r\nconst HAWB_NO = data.HAWB_NO;\r\n\r\nconst maxJobCountQuery = \"SELECT MAX(JobCount) as count FROM `ocean_import_ff` WHERE `Register_Branch_Id`=? AND YEAR(Created_Date)=?\";\r\n\r\normdb.query(maxJobCountQuery, [registerBranchId, currentYear], (err, maxCountResult) => {\r\n    if (err) {\r\n        console.error(err);\r\n        res.status(500).send(\"An error occurred while fetching max JobCount\");\r\n        return;\r\n    }\r\n\r\n    const maxCount = maxCountResult[0].count || 0; // Handle case where no rows found\r\n    const newJobCount = maxCount + 1;\r\n\r\n    // Update data object with calculated values\r\n   data.JOB_DOCKETNO = \"OIF/\"+registerBranchId+\"/\"+currentYear+\"/\"+newJobCount;\r\n    data.JobCount = newJobCount;\r\n\r\nquery = \"INSERT INTO `ocean_import_ff` SET  ? \";\r\n\r\n\r\normdb.query(query, data ,(err, result,feilds) => {\r\n       if (err) {\r\n           console.error(err);\r\n           res.status(500).send(\"An error occurred while Inserting  data\");\r\n       } else {\r\n        updateMasterStatus(mawbNumber,HAWB_NO);\r\n           res.json(result);\r\n       }\r\n   });\r\n\r\n});\r\n};\r\n\r\n","const express = require('express');\r\n\r\n\r\nconst router = express.Router();\r\nconst AirExportDahboard =require(\"../Routes/Dashboard/Dashboard\");\r\n\r\n\r\nrouter.post('/AirImport', AirExportDahboard.AirImportDahboard);\r\nrouter.post('/AirExport', AirExportDahboard.AirExportDahboard);\r\nrouter.post('/OceanImport', AirExportDahboard.OceanImportDahboard);\r\nrouter.post('/OceanExport', AirExportDahboard.OceanExportDahboard);\r\n\r\n\r\nmodule.exports = router;","const express = require('express');\r\nconst app=express();\r\n\r\nconst login =require(\"../Routes/Login/Login\");\r\n\r\n\r\n\r\n\r\napp.post('/login', login.getAllData);\r\napp.get('/Access', login.getAccess);\r\n\r\n\r\nmodule.exports = app;\r\n\r\n","const express = require('express');\r\nconst app=express();\r\nconst Airimport =require(\"../Routes/freightForwarding/AirImport\");\r\nconst report =require(\"../Routes/Reports/reports\");\r\nconst OceanImport =require(\"../Routes/freightForwarding/OceanImport\");\r\nconst OceanExport =require(\"../Routes/freightForwarding/OceanExport\");\r\n\r\n\r\n\r\n\r\n//  air import\r\n// app.post('/ai_AllMaster', Airimport.getAllMaster);\r\n// app.post('/ai_masterData',Airimport.getMasterData);\r\n// app.post('/ai_insert',Airimport.InsertAExport);\r\n// app.post('/ai_AllHawb', Airimport.getAllHawb);\r\n// app.post('/ai_Hawb',Airimport.getHawbData);\r\n\r\n\r\n//   air Export\r\napp.post('/aefRegister', report.getAllData);\r\n// app.post('/ae_masterData',AirExport.getMasterData);\r\n// app.post('/ae_insert',AirExport.InsertAExport);\r\n// app.post('/ae_AllMasterFF',AirExport.getAllMasterFromFF);\r\n// app.post('/ae_masterDataFF',AirExport.getMasterDataFromFF);\r\n// app.post('/ae_UpdateDataFF',AirExport.UpdateDataFF);\r\n\r\n\r\n// // //  Ocean import\r\n// app.post('/oi_AllMaster', OceanImport.getAllMaster);\r\n// app.post('/oi_masterData',OceanImport.getMasterData);\r\n\r\n// app.post('/oi_insert',OceanImport.InsertOImport);\r\n\r\n\r\n// // //  Ocean export\r\n// app.post('/oe_AllMaster', OceanExport.getAllMaster);\r\n// app.post('/oe_masterData',OceanExport.getMasterData);\r\n\r\n// app.post('/oe_insert',OceanExport.InsertOExport);\r\n \r\n\r\n\r\nmodule.exports = app;\r\n\r\n","const express = require('express');\r\nconst app=express();\r\nconst ChaAirimport =require(\"../Routes/customBrokerage/CHA_AirImport\");\r\nconst ChaAirExport =require(\"../Routes/customBrokerage/Cha_AirExport\");\r\nconst ChaOceanImport =require(\"../Routes/customBrokerage/Cha_OceanImport\");\r\nconst ChaOceanExport =require(\"../Routes/customBrokerage/Cha_OceanExport\");\r\n\r\n//  air import\r\napp.post('/ai_JobData',ChaAirimport.getJobData);\r\napp.post('/ai_jobinsert',ChaAirimport.InsertChaAimport);\r\n\r\n\r\n// // //  air Export\r\napp.post('/ae_JobData',ChaAirExport.getJobData);\r\napp.post('/ae_jobinsert',ChaAirExport.InsertChaExport);\r\n\r\n// // //  Ocean import\r\napp.post('/oi_JobData',ChaOceanImport.getJobData);\r\napp.post('/oi_jobinsert',ChaOceanImport.InsertChaOimport);\r\n\r\n// // //  Ocean export\r\napp.post('/oe_JobData',ChaOceanExport.getJobData);\r\napp.post('/oe_jobinsert',ChaOceanExport.InsertChaOExport);\r\n\r\nmodule.exports = app;\r\n\r\n","const express = require('express');\r\nconst app=express();\r\nconst Airimport =require(\"../Routes/freightForwarding/AirImport\");\r\nconst AirExport =require(\"../Routes/freightForwarding/AirExport\");\r\nconst OceanImport =require(\"../Routes/freightForwarding/OceanImport\");\r\nconst OceanExport =require(\"../Routes/freightForwarding/OceanExport\");\r\n\r\n\r\n//Some common API \r\napp.get('/Industry', Airimport.getAllIndustry);\r\napp.get('/User', Airimport.getAllUser);\r\n\r\n\r\n\r\n//  air import\r\napp.post('/ai_AllMaster', Airimport.getAllMaster);\r\napp.post('/ai_masterData',Airimport.getMasterData);\r\napp.post('/ai_insert',Airimport.InsertAExport);\r\n\r\napp.post('/ai_AllHawb', Airimport.getAllHawb);\r\napp.post('/ai_Hawb',Airimport.getHawbData);\r\n\r\n\r\n// //  air Export\r\n\r\napp.post('/ae_AllMaster', AirExport.getAllMaster);\r\napp.post('/ae_masterData',AirExport.getMasterData);\r\napp.post('/ae_insert',AirExport.InsertAExport);\r\napp.post('/ae_AllMasterFF',AirExport.getAllMasterFromFF);\r\napp.post('/ae_masterDataFF',AirExport.getMasterDataFromFF);\r\napp.post('/ae_UpdateDataFF',AirExport.UpdateDataFF);\r\n\r\n\r\n// //  Ocean import\r\napp.post('/oi_AllMaster', OceanImport.getAllMaster);\r\napp.post('/oi_masterData',OceanImport.getMasterData);\r\n\r\napp.post('/oi_insert',OceanImport.InsertOImport);\r\n\r\n\r\n// //  Ocean export\r\napp.post('/oe_AllMaster', OceanExport.getAllMaster);\r\napp.post('/oe_masterData',OceanExport.getMasterData);\r\n\r\napp.post('/oe_insert',OceanExport.InsertOExport);\r\n\r\n\r\n\r\nmodule.exports = app;\r\n\r\n","const express = require('express');\r\nconst app=express();\r\nconst RemovalsAirimport =require(\"../Routes/Removals/Air_Import_Removals\");\r\nconst RemovalsAirExport =require(\"../Routes/Removals/Air_Export_Removals\");\r\nconst RemovalsOceanImport =require(\"../Routes/Removals/Ocean_Import_Removals\");\r\nconst RemovalsOceanExport =require(\"../Routes/Removals/Ocean_Export_Removals\");\r\nconst RemovalsDomastic =require(\"../Routes/Removals/Domastic\");\r\n\r\n//  air import\r\n//app.post('/ai_JobData',RemovalsAirimport.getJobData);\r\napp.post('/ai_jobinsert',RemovalsAirimport.InsertAimportRemovals);\r\n\r\n\r\n// // //  air Export\r\n//app.post('/ae_JobData',RemovalsAirExport.getJobData);\r\napp.post('/ae_jobinsert',RemovalsAirExport.InsertAirExportRemovals);\r\n\r\n// // //  Ocean import\r\n//app.post('/oi_JobData',RemovalsOceanImport.getJobData);\r\napp.post('/oi_jobinsert',RemovalsOceanImport.InsertOceanImportRemovals);\r\n\r\n// // //  Ocean export\r\n//app.post('/oe_JobData',RemovalsOceanExport.getJobData);\r\napp.post('/oe_jobinsert',RemovalsOceanExport.InsertOceanExportRemovals);\r\n\r\n\r\n//domastic\r\napp.post('/Domestic_jobinsert',RemovalsDomastic.InsertDomasticRemovals);\r\n\r\n\r\n\r\n\r\n\r\nmodule.exports = app;\r\n\r\n","module.exports = require(\"cors\");","module.exports = require(\"csv-parser\");","module.exports = require(\"express\");","module.exports = require(\"moment\");","module.exports = require(\"mssql\");","module.exports = require(\"multer\");","module.exports = require(\"mysql\");","module.exports = require(\"node-cron\");","module.exports = require(\"nodemailer\");","module.exports = require(\"fs\");","module.exports = require(\"https\");","module.exports = require(\"path\");","module.exports = require(\"util\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// require('dotenv').config();\r\n\r\n// const https = require('https');\r\n// const fs = require('fs');\r\n// const express = require('express');\r\n// const cors = require('cors');\r\n// const cron = require('node-cron');\r\n\r\n// const ff = require('./src/controllers/freightForwardController');\r\n// const cha = require('./src/controllers/customBrokerageController');\r\n// const dashboard = require('./src/controllers/DashboardController');\r\n// const removals = require('./src/controllers/removalsController');\r\n// const finance = require('./src/Listners/FinaceDataToDb');\r\n\r\n// const app = express();\r\n\r\n// app.use(express.json());\r\n// app.use(cors());\r\n\r\n// app.use('/ff', ff);\r\n// app.use('/cha', cha);\r\n// app.use('/dashboard', dashboard);\r\n// app.use('/removals', removals);\r\n// app.use('/finance', finance);\r\n\r\n// cron.schedule('27 16 * * *', () => {\r\n//     console.log('Running scheduled task at 16:27 (4:27 PM)');\r\n//     // processRemoteFile();\r\n// });\r\n\r\n// const options = {\r\n//     key: fs.readFileSync(process.env.SSL_KEY_PATH),\r\n//     cert: fs.readFileSync(process.env.SSL_CERT_PATH)\r\n// };\r\n\r\n// https.createServer(options, app).listen(process.env.PORT, () => {\r\n//     console.log(`Server is started on https://localhost:${process.env.PORT}`);\r\n// });\r\n\r\n\r\nconst express = require('express');\r\nconst fs = require('fs');\r\nconst cors = require('cors');\r\nconst cron = require('node-cron');\r\nconst https = require('https');\r\n\r\n// Import your controllers\r\nconst ff = require('./controllers/freightForwardController');\r\nconst cha = require('./controllers/customBrokerageController');\r\nconst dashboard = require('./controllers/DashboardController');\r\nconst removals = require('./controllers/removalsController');\r\nconst finance = require('./Listners/FinaceDataToDb');\r\nconst Reports=require('./controllers/Reports');\r\nconst login= require('./controllers/Login');\r\n \r\n// Create an Express application\r\nconst app = express();\r\n\r\n// Middleware\r\napp.use(express.json());\r\napp.use(cors());\r\n\r\n// Routes\r\napp.use('/ff', ff);\r\napp.use('/cha', cha);\r\napp.use('/dashboard', dashboard);\r\napp.use('/removals', removals);\r\napp.use('/finance', finance);\r\napp.use('/Reports',Reports);\r\napp.use('/User',login);\r\n\r\n\r\n// Cron job (adjust as needed)\r\ncron.schedule('27 16 * * *', () => {\r\n  console.log('Running scheduled task at 16:27 (4:27 PM)');\r\n});\r\n\r\n\r\n// Check the environment\r\nconsole.log('NODE_ENV:', process.env.NODE_ENV);\r\n\r\n// Start server based on environment\r\nif (process.env.NODE_ENV === 'production') {\r\n  // HTTPS for production\r\n  const options = {\r\n    key: fs.readFileSync('C:/Users/neinuat/key.pem'),\r\n    cert: fs.readFileSync('C:/Users/neinuat/cert.pem'),\r\n\tca: fs.readFileSync('C:/Users/neinuat/chain.pem')\r\n  };\r\n\r\n  https.createServer(options, app).listen(5000, (err) => {\r\n    if (err) {\r\n      console.error('Failed to start HTTPS server:', err);\r\n    } else {\r\n      console.log('HTTPS Server running on port 5000');\r\n    }\r\n  });\r\n}\r\n else {\r\n  // HTTP for development\r\n  app.listen(5000, () => {\r\n    console.log('HTTP Server running on port 443');\r\n  });\r\n}"],"names":["mysql","require","ormdb","createConnection","host","user","password","database","leavemanagement","test","module","exports","app","express","fs","csv","moment","multer","path","storage","diskStorage","destination","req","file","cb","dirname","originalName","now","year","month","format","day","hour","uploadDir","join","existsSync","mkdirSync","recursive","generateFilePath","originalname","filename","upload","util","post","single","async","res","dataRows","console","log","status","send","filePath","rows","Promise","resolve","reject","resultRows","createReadStream","pipe","on","headers","map","header","trim","row","trimmedRow","Object","keys","forEach","key","push","error","query","promisify","bind","Branch","Division","Invoice_No","Issue_Date","Sales_group","Airway_Bill_No","Master_Airway_Bill_No","Reference_No","Bill_To_Name","Shipper_Name","Consignee_Name","SR_Date","SR_No","Amount","Account_Code","Invoice_Create_Date","checkQuery","count","insertQuery","insertResults","insertId","length","processedInvoices","data","invoices","invoiceNo","airwayBillNo","issueDate","amount","parseFloat","accountCode","lineAmount","AirwayBillNo","IssueDate","Revenue","Reimbursement","GST","accountNumber","parseInt","slice","startsWith","invoice","totalCalculated","Status","Math","abs","processInvoiceData","err","results","mawbNumber","body","HAWB_NO","queryParams","result","json","nodemailer","from","to","cc","subject","mailOptions","html","createTransport","port","secure","auth","pass","connectionTimeout","greetingTimeout","debug","sendMail","info","messageId","AirImportDahboard","FromDate","Todate","BranchCode","AirExportDahboard","BranchId","OceanImportDahboard","OceanExportDahboard","sqlServerConnection","getAllData","userid","getAccess","sqlServerConnectionPool","InsertAirExportRemovals","currentYear","Date","getFullYear","registerBranchId","Register_Branch_Id","MAWB_NO","maxCountResult","newJobCount","OR_JOB_NO","sequenceId","feilds","InsertAimportRemovals","InsertDomasticRemovals","InsertOceanExportRemovals","InsertOceanImportRemovals","sql","getJobData","jobNo","checkExistenceParams","then","pool","request","input","VarChar","recordset","catch","InsertChaAimport","updateMasterStatus","InsertChaExport","InsertChaOExport","InsertChaOimport","getAllMaster","getAllMasterFromFF","getMasterData","checkFlagParams","fetchWithUserQuery","fetchWithUserParams","hawb","UpdateDataFF","BUYING_RATE","CUSTOMS_CLEARANCE_DATE","DUE_CARRIER","FREIGHT_AMOUNT","IATA_AGENT","Industry","MARGIN_KG","MainProduct","NETDUE","OperationPic","REMARKS","SELL_RATE","SHIPPER_INVOICE_NO","SHIPPING_BILL_DATE","SHIPPING_BILL_NO","SUB_AGENT","SalesPic","TOTAL_MARGIN","cha","clearanceDoneBy","salesPicBranch","fields","success","message","InsertAExport","JOB_DOCKETNO","JobCount","getMasterDataFromFF","getAllIndustry","getAllUser","getAllHawb","getHawbData","InsertOExport","InsertOImport","router","Router","login","get","report","ChaAirimport","ChaAirExport","ChaOceanImport","ChaOceanExport","Airimport","AirExport","OceanImport","OceanExport","RemovalsAirimport","RemovalsAirExport","RemovalsOceanImport","RemovalsOceanExport","RemovalsDomastic","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","cors","cron","https","ff","dashboard","removals","finance","Reports","use","schedule","process","options","readFileSync","cert","ca","createServer","listen"],"sourceRoot":""}